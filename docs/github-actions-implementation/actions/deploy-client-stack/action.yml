name: 'Deploy Simple Container Client Stack'
description: 'Deploy application stacks using Simple Container'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  stack-name:
    description: 'Name of the stack to deploy'
    required: true
  environment:
    description: 'Target environment (staging, prod, etc.)'
    required: true
    default: 'staging'
  sc-config:
    description: 'Simple Container configuration (SC_CONFIG secret content)'
    required: true
  sc-version:
    description: 'Simple Container CLI version'
    required: false
    default: 'latest'
  sc-deploy-flags:
    description: 'Additional flags for sc deploy command'
    required: false
    default: '--skip-preview'
  pr-preview:
    description: 'Enable PR preview mode'
    required: false
    default: 'false'
  preview-domain-base:
    description: 'Base domain for PR preview subdomains'
    required: false
    default: 'preview.mycompany.com'
  stack-yaml-config:
    description: 'Additional YAML config to append (base64 encoded)'
    required: false
  stack-yaml-config-encrypted:
    description: 'Whether stack-yaml-config is encrypted'
    required: false
    default: 'false'
  app-image-version:
    description: 'Application image version for IMAGE_VERSION env var'
    required: false
  validation-command:
    description: 'Optional command to run after deployment'
    required: false

outputs:
  version:
    description: 'Generated version for the deployment'
  environment:
    description: 'Environment that was deployed to'
  stack-name:
    description: 'Stack name that was deployed'
  duration:
    description: 'Deployment duration'
  status:
    description: 'Deployment status (success/failure)'
  build-url:
    description: 'URL to the GitHub Actions build'

runs:
  using: 'composite'
  steps:
    - name: Setup Simple Container
      uses: simple-container-com/api/.github/actions/setup-sc@v2025.10.4
      with:
        sc-config: ${{ inputs.sc-config }}
        sc-version: ${{ inputs.sc-version }}
    
    - name: Generate Version
      id: version
      shell: bash
      run: |
        VERSION=$(date +%Y.%-m.%-d).${GITHUB_RUN_NUMBER:-1}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: Extract Build Metadata
      id: metadata
      shell: bash
      run: |
        echo "branch=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
        echo "author=$GITHUB_ACTOR" >> $GITHUB_OUTPUT
        echo "build-url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
        echo "commit-sha=$GITHUB_SHA" >> $GITHUB_OUTPUT
        
        # Extract commit message safely
        if [[ -n "${{ github.event.head_commit.message }}" ]]; then
          echo "message=${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
        else
          echo "message=Manual deployment" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup PR Preview
      if: inputs.pr-preview == 'true'
      shell: bash
      run: |
        if [[ -z "${{ github.event.pull_request.number }}" ]]; then
          echo "‚ùå PR preview enabled but no PR number available"
          exit 1
        fi
        
        PR_NUMBER="${{ github.event.pull_request.number }}"
        SUBDOMAIN="pr${PR_NUMBER}-${{ inputs.preview-domain-base }}"
        echo "PREVIEW_SUBDOMAIN=$SUBDOMAIN" >> $GITHUB_ENV
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
    
    - name: Deploy Stack
      id: deploy
      shell: bash
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
        VERSION: ${{ steps.version.outputs.version }}
        STACK_NAME: ${{ inputs.stack-name }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        echo "üöÄ Deploying $STACK_NAME to $ENVIRONMENT (v$VERSION)"
        
        # Set IMAGE_VERSION if provided
        if [[ -n "${{ inputs.app-image-version }}" ]]; then
          export IMAGE_VERSION="${{ inputs.app-image-version }}"
          echo "Setting IMAGE_VERSION=$IMAGE_VERSION"
        fi
        
        # Handle PR preview configuration
        if [[ "${{ inputs.pr-preview }}" == "true" ]]; then
          echo "üìù Configuring PR preview for $PREVIEW_SUBDOMAIN"
          # PR preview configuration would be handled by shared setup-sc action
        fi
        
        # Handle additional stack configuration
        if [[ -n "${{ inputs.stack-yaml-config }}" ]]; then
          echo "üìù Applying additional stack configuration"
          # Stack config handling would be done by setup-sc action
        fi
        
        # Execute deployment
        sc deploy -s "$STACK_NAME" -e "$ENVIRONMENT" ${{ inputs.sc-deploy-flags }}
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "‚úÖ Deployment completed successfully"
    
    - name: Run Validation
      if: inputs.validation-command != ''
      shell: bash
      env:
        DEPLOYED_VERSION: ${{ steps.version.outputs.version }}
        STACK_NAME: ${{ inputs.stack-name }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        echo "üîç Running post-deployment validation"
        ${{ inputs.validation-command }}
        echo "‚úÖ Validation completed successfully"
    
    - name: Calculate Duration
      if: always()
      id: duration
      shell: bash
      run: |
        start_time="${{ steps.version.outputs.start-time }}"
        end_time=$(date +%s)
        duration_sec=$((end_time - start_time))
        duration_min=$((duration_sec / 60))
        duration_sec=$((duration_sec % 60))
        duration="${duration_min}m${duration_sec}s"
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "Build duration: $duration"
    
    - name: Set Final Outputs
      if: always()
      shell: bash
      run: |
        echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "stack-name=${{ inputs.stack-name }}" >> $GITHUB_OUTPUT
        echo "duration=${{ steps.duration.outputs.duration }}" >> $GITHUB_OUTPUT
        echo "status=${{ steps.deploy.outputs.status || 'failure' }}" >> $GITHUB_OUTPUT
        echo "build-url=${{ steps.metadata.outputs.build-url }}" >> $GITHUB_OUTPUT
    
    - name: Handle Failure
      if: failure()
      shell: bash
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
      run: |
        echo "‚ùå Deployment failed, attempting cleanup"
        sc cancel -s "${{ inputs.stack-name }}" -e "${{ inputs.environment }}" || echo "Failed to cancel operations"
