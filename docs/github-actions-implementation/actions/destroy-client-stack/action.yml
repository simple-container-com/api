name: 'Destroy Simple Container Client Stack'
description: 'Safely destroy application stacks using Simple Container'
branding:
  icon: 'trash-2'
  color: 'red'

inputs:
  stack-name:
    description: 'Name of the stack to destroy'
    required: true
  environment:
    description: 'Environment to destroy'
    required: true
  sc-config:
    description: 'Simple Container configuration (SC_CONFIG secret content)'
    required: true
  sc-version:
    description: 'Simple Container CLI version'
    required: false
    default: 'latest'
  sc-destroy-flags:
    description: 'Additional flags for sc destroy command'
    required: false
    default: ''
  auto-confirm:
    description: 'Automatically confirm destruction'
    required: false
    default: 'false'
  pr-preview:
    description: 'Enable PR preview mode for cleanup'
    required: false
    default: 'false'
  preview-domain-base:
    description: 'Base domain for PR preview subdomains'
    required: false
    default: 'preview.mycompany.com'
  skip-backup:
    description: 'Skip automatic backup before destruction'
    required: false
    default: 'false'
  wait-timeout:
    description: 'Maximum time to wait in minutes'
    required: false
    default: '30'

outputs:
  stack-name:
    description: 'Stack name that was destroyed'
  environment:
    description: 'Environment that was destroyed'
  duration:
    description: 'Destruction duration'
  status:
    description: 'Destruction status (success/failure/cancelled)'
  backup-location:
    description: 'Location of configuration backup'
  resources-destroyed:
    description: 'Count of resources destroyed'

runs:
  using: 'composite'
  steps:
    - name: Validate Destruction Request
      shell: bash
      run: |
        echo "🔍 Validating destruction request..."
        echo "Stack: ${{ inputs.stack-name }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Auto-confirm: ${{ inputs.auto-confirm }}"
        
        # Production safety check
        if [[ "${{ inputs.environment }}" == "prod" || "${{ inputs.environment }}" == "production" ]]; then
          if [[ "${{ inputs.auto-confirm }}" != "true" ]]; then
            echo "❌ Production destruction requires auto-confirm=true"
            echo "This safety check prevents accidental production destruction"
            exit 1
          fi
          echo "⚠️ Production environment destruction confirmed"
        fi
    
    - name: Setup Simple Container
      uses: simple-container-com/actions/.github/actions/setup-sc@v1
      with:
        sc-config: ${{ inputs.sc-config }}
        sc-version: ${{ inputs.sc-version }}
        setup-devops-repo: ${{ inputs.pr-preview == 'true' && 'true' || 'false' }}
    
    - name: Create Backup
      if: inputs.skip-backup != 'true'
      id: backup
      shell: bash
      run: |
        echo "💾 Creating configuration backup..."
        
        # Create timestamped backup directory
        BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BACKUP_DIR="backups/${BACKUP_TIMESTAMP}_${{ inputs.stack-name }}_${{ inputs.environment }}"
        mkdir -p "$BACKUP_DIR"
        
        # Backup client configuration if it exists
        if [[ -f ".sc/stacks/${{ inputs.stack-name }}/client.yaml" ]]; then
          cp ".sc/stacks/${{ inputs.stack-name }}/client.yaml" "$BACKUP_DIR/"
          echo "✅ Backed up client.yaml"
        fi
        
        # Backup docker-compose and other configs
        for file in docker-compose.yaml Dockerfile .env; do
          if [[ -f "$file" ]]; then
            cp "$file" "$BACKUP_DIR/"
          fi
        done
        
        # Create restoration guide
        cat > "$BACKUP_DIR/RESTORATION_GUIDE.md" <<EOF
# Stack Restoration Guide

**Stack**: ${{ inputs.stack-name }}
**Environment**: ${{ inputs.environment }}
**Backup Created**: $(date)
**Triggered By**: $GITHUB_ACTOR

## Restoration Steps
1. Restore configuration: \`cp client.yaml .sc/stacks/${{ inputs.stack-name }}/\`
2. Deploy stack: \`sc deploy -s ${{ inputs.stack-name }} -e ${{ inputs.environment }}\`

EOF
        
        echo "backup-location=$BACKUP_DIR" >> $GITHUB_OUTPUT
        echo "✅ Configuration backup created at: $BACKUP_DIR"
    
    - name: Setup PR Preview Configuration
      if: inputs.pr-preview == 'true'
      shell: bash
      run: |
        echo "📝 Setting up PR preview configuration..."
        
        if [[ -z "${{ github.event.pull_request.number }}" ]]; then
          echo "⚠️ PR preview mode enabled but no PR number available"
          exit 0
        fi
        
        PR_NUMBER="${{ github.event.pull_request.number }}"
        SUBDOMAIN="pr${PR_NUMBER}-${{ inputs.preview-domain-base }}"
        
        echo "Configuring PR preview for: $SUBDOMAIN"
        
        # Use DevOps repo scripts if available
        if [[ -f ".devops/.github/workflows/scripts/append-stack-profile.sh" ]]; then
          bash .devops/.github/workflows/scripts/append-stack-profile.sh \
            ".sc/stacks/${{ inputs.stack-name }}/client.yaml" \
            "$SUBDOMAIN" \
            "$PR_NUMBER"
        fi
    
    - name: Verify Stack Exists
      id: verify
      shell: bash
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
      run: |
        echo "🔍 Verifying stack exists before destruction..."
        
        if sc status -s "${{ inputs.stack-name }}" -e "${{ inputs.environment }}" >/dev/null 2>&1; then
          echo "stack-exists=true" >> $GITHUB_OUTPUT
          echo "✅ Stack ${{ inputs.stack-name }} found in ${{ inputs.environment }}"
        else
          echo "stack-exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ Stack ${{ inputs.stack-name }} not found in ${{ inputs.environment }}"
        fi
    
    - name: Destroy Stack
      if: steps.verify.outputs.stack-exists == 'true'
      id: destroy
      shell: bash
      timeout-minutes: ${{ fromJSON(inputs.wait-timeout) }}
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
      run: |
        echo "🗑️ Starting stack destruction..."
        echo "Stack: ${{ inputs.stack-name }}"
        echo "Environment: ${{ inputs.environment }}"
        
        # Set start time
        echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
        
        # Build destroy command
        DESTROY_CMD="sc destroy -s ${{ inputs.stack-name }} -e ${{ inputs.environment }} ${{ inputs.sc-destroy-flags }}"
        
        # Execute with automatic confirmation
        if echo y | $DESTROY_CMD; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ Stack destruction completed successfully"
          
          # Try to get resource count (if SC supports it)
          RESOURCE_COUNT=$(sc status -s "${{ inputs.stack-name }}" -e "${{ inputs.environment }}" --count-resources 2>/dev/null || echo "unknown")
          echo "resources-destroyed=$RESOURCE_COUNT" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "❌ Stack destruction failed"
          exit 1
        fi
    
    - name: Handle Stack Not Found
      if: steps.verify.outputs.stack-exists == 'false'
      shell: bash
      run: |
        echo "status=not-found" >> $GITHUB_OUTPUT
        echo "resources-destroyed=0" >> $GITHUB_OUTPUT
        echo "✅ Stack already destroyed or never existed"
    
    - name: Calculate Duration
      if: always()
      id: duration
      shell: bash
      run: |
        if [[ -n "${{ steps.destroy.outputs.start-time }}" ]]; then
          start_time="${{ steps.destroy.outputs.start-time }}"
          end_time=$(date +%s)
          duration_sec=$((end_time - start_time))
        else
          duration_sec=0
        fi
        
        duration_min=$((duration_sec / 60))
        duration_sec=$((duration_sec % 60))
        duration="${duration_min}m${duration_sec}s"
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "Destruction duration: $duration"
    
    - name: Handle Cancellation
      if: cancelled()
      shell: bash
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
      run: |
        echo "⚠️ Stack destruction cancelled by user"
        
        # Attempt to cancel ongoing operations
        sc cancel -s "${{ inputs.stack-name }}" -e "${{ inputs.environment }}" || echo "Failed to cancel operations"
        
        echo "status=cancelled" >> $GITHUB_OUTPUT
    
    - name: Set Final Outputs
      if: always()
      shell: bash
      run: |
        echo "stack-name=${{ inputs.stack-name }}" >> $GITHUB_OUTPUT
        echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "duration=${{ steps.duration.outputs.duration }}" >> $GITHUB_OUTPUT
        echo "status=${{ steps.destroy.outputs.status || 'unknown' }}" >> $GITHUB_OUTPUT
        echo "backup-location=${{ steps.backup.outputs.backup-location }}" >> $GITHUB_OUTPUT
        echo "resources-destroyed=${{ steps.destroy.outputs.resources-destroyed || '0' }}" >> $GITHUB_OUTPUT
