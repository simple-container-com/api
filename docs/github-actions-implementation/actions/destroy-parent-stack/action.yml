name: 'Destroy Simple Container Parent Stack'
description: 'Safely destroy shared infrastructure using Simple Container'
branding:
  icon: 'alert-triangle'
  color: 'red'

inputs:
  sc-config:
    description: 'Simple Container configuration (SC_CONFIG secret content)'
    required: true
  confirmation:
    description: 'Destruction confirmation - must be "DESTROY-INFRASTRUCTURE"'
    required: true
  target-environment:
    description: 'Specific environment to destroy (required for safety)'
    required: true
  sc-version:
    description: 'Simple Container CLI version'
    required: false
    default: 'latest'
  destroy-scope:
    description: 'Scope of destruction (environment-only, shared-resources, all)'
    required: false
    default: 'environment-only'
  safety-mode:
    description: 'Safety mode (strict, standard, permissive)'
    required: false
    default: 'strict'
  force-destroy:
    description: 'Force destruction even if dependencies exist'
    required: false
    default: 'false'
  backup-before-destroy:
    description: 'Create infrastructure backup before destruction'
    required: false
    default: 'true'
  preserve-data:
    description: 'Attempt to preserve data resources'
    required: false
    default: 'true'
  exclude-resources:
    description: 'Comma-separated list of resources to exclude'
    required: false
  wait-timeout:
    description: 'Maximum time to wait in minutes'
    required: false
    default: '60'

outputs:
  duration:
    description: 'Infrastructure destruction duration'
  status:
    description: 'Destruction status (success/failure/cancelled)'
  resources-destroyed:
    description: 'Count of resources destroyed'
  backup-location:
    description: 'Location of infrastructure backup'
  cost-savings:
    description: 'Estimated monthly cost savings'
  environments-affected:
    description: 'List of environments affected'
  cleanup-summary:
    description: 'Detailed summary of destruction operations'

runs:
  using: 'composite'
  steps:
    - name: Validate Destruction Confirmation
      shell: bash
      run: |
        echo "🔍 Validating infrastructure destruction request..."
        
        # Validate exact confirmation string
        if [[ "${{ inputs.confirmation }}" != "DESTROY-INFRASTRUCTURE" ]]; then
          echo "❌ Invalid confirmation string provided"
          echo "Expected: 'DESTROY-INFRASTRUCTURE'"
          echo "Received: '${{ inputs.confirmation }}'"
          echo ""
          echo "This safety check prevents accidental infrastructure destruction."
          echo "Please provide the exact confirmation string to proceed."
          exit 1
        fi
        
        # Validate required target environment
        if [[ -z "${{ inputs.target-environment }}" ]]; then
          echo "❌ Target environment must be specified for safety"
          echo "This prevents accidental destruction of all environments"
          exit 1
        fi
        
        # Validate safety mode
        case "${{ inputs.safety-mode }}" in
          "strict"|"standard"|"permissive")
            echo "✅ Safety mode: ${{ inputs.safety-mode }}"
            ;;
          *)
            echo "❌ Invalid safety mode: ${{ inputs.safety-mode }}"
            echo "Valid options: strict, standard, permissive"
            exit 1
            ;;
        esac
        
        echo "✅ Destruction request validated"
        echo "Environment: ${{ inputs.target-environment }}"
        echo "Scope: ${{ inputs.destroy-scope }}"
    
    - name: Setup Simple Container
      uses: simple-container-com/actions/.github/actions/setup-sc@v1
      with:
        sc-config: ${{ inputs.sc-config }}
        sc-version: ${{ inputs.sc-version }}
        setup-devops-repo: 'true'
    
    - name: Analyze Infrastructure Dependencies
      id: analysis
      shell: bash
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
      run: |
        echo "🔍 Analyzing infrastructure dependencies..."
        
        # Find dependent client stacks (this would be implemented in SC CLI)
        echo "Checking for client stacks using parent infrastructure..."
        
        # For now, simulate dependency analysis
        # In real implementation, SC would analyze dependencies
        DEPENDENT_STACKS="[]"
        STACK_COUNT=0
        
        if [[ "$STACK_COUNT" -gt 0 ]] && [[ "${{ inputs.force-destroy }}" != "true" ]]; then
          echo "❌ Found $STACK_COUNT dependent client stacks"
          echo "Cannot destroy infrastructure with active dependencies"
          echo "Either destroy dependent stacks first or use force-destroy option"
          exit 1
        fi
        
        # Calculate estimated cost impact
        ESTIMATED_COST="unknown"
        RESOURCE_COUNT="unknown"
        
        echo "dependent-stacks=$STACK_COUNT" >> $GITHUB_OUTPUT
        echo "estimated-cost-savings=$ESTIMATED_COST" >> $GITHUB_OUTPUT
        echo "resource-count=$RESOURCE_COUNT" >> $GITHUB_OUTPUT
        
        echo "✅ Dependency analysis completed"
    
    - name: Create Infrastructure Backup
      if: inputs.backup-before-destroy == 'true'
      id: backup
      shell: bash
      run: |
        echo "💾 Creating infrastructure backup..."
        
        BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BACKUP_DIR="infrastructure-backups/${BACKUP_TIMESTAMP}_${{ inputs.target-environment }}"
        mkdir -p "$BACKUP_DIR"
        
        # Backup server configurations
        if [[ -d ".sc/stacks" ]]; then
          cp -r ".sc/stacks" "$BACKUP_DIR/stack-configs"
          echo "✅ Backed up stack configurations"
        fi
        
        # Backup secrets structure (sanitized)
        if [[ -f ".sc/secrets.yaml" ]]; then
          sc secrets export --sanitized > "$BACKUP_DIR/secrets-structure.yaml" 2>/dev/null || echo "No secrets to backup"
          echo "✅ Backed up secrets structure"
        fi
        
        # Export infrastructure state (if supported by SC)
        sc infrastructure export --environment "${{ inputs.target-environment }}" \
          --output "$BACKUP_DIR/infrastructure-state.json" 2>/dev/null || echo "Infrastructure export not available"
        
        # Create restoration guide
        cat > "$BACKUP_DIR/RESTORATION_GUIDE.md" <<EOF
# Infrastructure Restoration Guide

**Environment**: ${{ inputs.target-environment }}
**Backup Created**: $(date)
**Triggered By**: $GITHUB_ACTOR
**GitHub Run**: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

## Restoration Steps

1. **Restore stack configurations:**
   \`\`\`bash
   cp -r stack-configs/* .sc/stacks/
   \`\`\`

2. **Restore secrets structure:**
   \`\`\`bash
   # Review secrets-structure.yaml for required secrets
   # Manually restore actual secret values from secure storage
   \`\`\`

3. **Re-provision infrastructure:**
   \`\`\`bash
   sc provision --environment ${{ inputs.target-environment }}
   \`\`\`

## Recovery Time Estimate
- **Simple setup**: 30-60 minutes
- **Complex setup**: 2-4 hours

## Prerequisites
- Access to cloud provider credentials
- Original secret values from secure storage
- Simple Container CLI v${{ inputs.sc-version }}

EOF
        
        echo "backup-location=$BACKUP_DIR" >> $GITHUB_OUTPUT
        echo "✅ Infrastructure backup created at: $BACKUP_DIR"
    
    - name: Execute Infrastructure Destruction
      id: destroy
      shell: bash
      timeout-minutes: ${{ fromJSON(inputs.wait-timeout) }}
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
      run: |
        echo "🗑️ Starting infrastructure destruction..."
        echo "Environment: ${{ inputs.target-environment }}"
        echo "Scope: ${{ inputs.destroy-scope }}"
        echo "Safety Mode: ${{ inputs.safety-mode }}"
        
        # Set start time
        echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
        
        # Build destruction command
        DESTROY_OPTIONS="--environment ${{ inputs.target-environment }}"
        
        if [[ "${{ inputs.preserve-data }}" == "true" ]]; then
          DESTROY_OPTIONS="$DESTROY_OPTIONS --preserve-data"
        fi
        
        if [[ -n "${{ inputs.exclude-resources }}" ]]; then
          DESTROY_OPTIONS="$DESTROY_OPTIONS --exclude ${{ inputs.exclude-resources }}"
        fi
        
        if [[ "${{ inputs.force-destroy }}" == "true" ]]; then
          DESTROY_OPTIONS="$DESTROY_OPTIONS --force"
        fi
        
        # Execute destruction based on scope
        case "${{ inputs.destroy-scope }}" in
          "environment-only")
            echo "🗑️ Destroying environment-specific resources only..."
            echo y | sc deprovision $DESTROY_OPTIONS --scope environment
            ;;
          "shared-resources")
            echo "🗑️ Destroying shared resources..."
            echo y | sc deprovision $DESTROY_OPTIONS --scope shared
            ;;
          "all")
            echo "🗑️ Destroying all infrastructure..."
            echo y | sc deprovision $DESTROY_OPTIONS --scope all
            ;;
          *)
            echo "❌ Invalid destroy scope: ${{ inputs.destroy-scope }}"
            exit 1
            ;;
        esac
        
        # Verify destruction completion
        REMAINING_RESOURCES=$(sc infrastructure list --environment "${{ inputs.target-environment }}" --count 2>/dev/null || echo "0")
        
        if [[ "$REMAINING_RESOURCES" -eq 0 ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ Infrastructure destruction completed successfully"
        else
          echo "status=partial" >> $GITHUB_OUTPUT
          echo "⚠️ Infrastructure destruction completed with $REMAINING_RESOURCES remaining resources"
        fi
        
        echo "resources-remaining=$REMAINING_RESOURCES" >> $GITHUB_OUTPUT
        echo "resources-destroyed=unknown" >> $GITHUB_OUTPUT
    
    - name: Generate Cleanup Summary
      if: always()
      id: summary
      shell: bash
      run: |
        echo "📋 Generating cleanup summary..."
        
        CLEANUP_SUMMARY=$(cat <<EOF
# Infrastructure Destruction Summary

**Environment**: ${{ inputs.target-environment }}
**Scope**: ${{ inputs.destroy-scope }}
**Status**: ${{ steps.destroy.outputs.status || 'failed' }}
**Duration**: Calculating...
**Resources Destroyed**: ${{ steps.destroy.outputs.resources-destroyed }}
**Resources Remaining**: ${{ steps.destroy.outputs.resources-remaining }}
**Backup Location**: ${{ steps.backup.outputs.backup-location }}

## Safety Measures Applied
- Confirmation Required: ✅ DESTROY-INFRASTRUCTURE
- Target Environment: ✅ ${{ inputs.target-environment }}
- Safety Mode: ✅ ${{ inputs.safety-mode }}
- Backup Created: ${{ inputs.backup-before-destroy == 'true' && '✅' || '❌' }}
- Data Preservation: ${{ inputs.preserve-data == 'true' && '✅' || '❌' }}

EOF
)
        
        echo "cleanup-summary<<EOF" >> $GITHUB_OUTPUT
        echo "$CLEANUP_SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Calculate Duration
      if: always()
      id: duration
      shell: bash
      run: |
        if [[ -n "${{ steps.destroy.outputs.start-time }}" ]]; then
          start_time="${{ steps.destroy.outputs.start-time }}"
          end_time=$(date +%s)
          duration_sec=$((end_time - start_time))
        else
          duration_sec=0
        fi
        
        duration_min=$((duration_sec / 60))
        duration_sec=$((duration_sec % 60))
        duration="${duration_min}m${duration_sec}s"
        echo "duration=$duration" >> $GITHUB_OUTPUT
        echo "Infrastructure destruction duration: $duration"
    
    - name: Handle Cancellation
      if: cancelled()
      shell: bash
      env:
        SIMPLE_CONTAINER_CONFIG: ${{ inputs.sc-config }}
      run: |
        echo "⚠️ Infrastructure destruction cancelled"
        
        # Attempt to cancel ongoing operations
        sc cancel --environment "${{ inputs.target-environment }}" || echo "Failed to cancel operations"
        
        echo "status=cancelled" >> $GITHUB_OUTPUT
    
    - name: Set Final Outputs
      if: always()
      shell: bash
      run: |
        echo "duration=${{ steps.duration.outputs.duration }}" >> $GITHUB_OUTPUT
        echo "status=${{ steps.destroy.outputs.status || 'failure' }}" >> $GITHUB_OUTPUT
        echo "resources-destroyed=${{ steps.destroy.outputs.resources-destroyed || '0' }}" >> $GITHUB_OUTPUT
        echo "backup-location=${{ steps.backup.outputs.backup-location }}" >> $GITHUB_OUTPUT
        echo "cost-savings=${{ steps.analysis.outputs.estimated-cost-savings }}" >> $GITHUB_OUTPUT
        echo "environments-affected=${{ inputs.target-environment }}" >> $GITHUB_OUTPUT
        echo "cleanup-summary=${{ steps.summary.outputs.cleanup-summary }}" >> $GITHUB_OUTPUT
