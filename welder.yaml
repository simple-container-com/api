schemaVersion: "1.8.1"
projectName: simple-container-api
projectRoot: .
version: ${env:VERSION:0.0.0}
default:
  build:
    args:
      package: github.com/simple-container-com/api
      ld-flags: "-s -w -X=${arg:package}/internal/build.Version=${project:version}"
profiles:
  skip-tools:
  skip-embeddings:
    build:
      env:
        SKIP_EMBEDDINGS: "true"
  skip-test:
    activation:
      skip-tests: true
    build:
      env:
        SKIP_TESTS: "true"
modules:
  - name: api
    build:
      steps:
        - task: clean
        - task: tools
        - task: generate-schemas
        - task: linters
        - task: fmt
        - task: test
        - task: build-all
        - task: build-github-actions
        - task: docker-login
        - task: build-cloud-helpers
        - task: build-docs
    deploy:
      environments:
        prod:
          autoDeploy: true
      steps:
        - task: rebuild
        - task: deploy
    dockerImages:
      - name: kubectl
        dockerFile: ${project:root}/kubectl.Dockerfile
        tags:
          - simplecontainer/kubectl:latest
          - simplecontainer/kubectl:${project:version}
      - name: caddy
        dockerFile: ${project:root}/caddy.Dockerfile
        tags:
          - simplecontainer/caddy:latest
          - simplecontainer/caddy:${project:version}
      - name: github-actions
        dockerFile: ${project:root}/github-actions.Dockerfile
        tags:
          - simplecontainer/github-actions:latest
          - simplecontainer/github-actions:${project:version}
      - name: github-actions-staging
        dockerFile: ${project:root}/github-actions-staging.Dockerfile
        tags:
          - simplecontainer/github-actions:staging
      - name: cloud-helpers-aws
        dockerFile: ${project:root}/cloud-helpers.aws.Dockerfile
        tags:
          - simplecontainer/cloud-helpers:aws-latest
          - simplecontainer/cloud-helpers:aws-${project:version}
        runAfterPush:
          tasks:
            - tag-release
tasks:
  clean:
    runOn: host
    script:
      - mkdir -p ${project:root}/dist
      - rm -fR ${project:root}/dist/*
      - mkdir -p ${project:root}/.sc/stacks/dist/bundle
      - rm -fR ${project:root}/.sc/stacks/dist/bundle/*
      - mkdir -p ${project:root}/docs/site
      - rm -fR ${project:root}/docs/site/*
      - mkdir -p ${project:root}/docs/schemas
      - rm -fR ${project:root}/docs/schemas/*
  tools:
    runOn: host
    runIf: "!${profile:skip-tools.active}"
    script:
      - cat tools.go | grep _ | awk -F'"' '{print $2}' | xargs -tI % go get %
      - go mod download
      - go generate -tags tools
      - go mod tidy
  fmt:
    runOn: host
    script:
      - go mod tidy
      - ${project:root}/bin/gofumpt -l -w ./
      - ${project:root}/bin/golangci-lint run --fix --timeout 3m -v
  linters:
    runOn: host
    script:
      - ${project:root}/bin/golangci-lint run --fast --timeout 5m -v
  build-all:
    runOn: host
    script:
      - go build ./...
      - welder run build -a os=linux -a arch=amd64
      - welder run build -a os=darwin -a arch=arm64
      - welder run build -a os=darwin -a arch=amd64
      - cp ${project:root}/sc.sh ${project:root}/.sc/stacks/dist/bundle/sc.sh
      - sed -i -e 's/VERSION="0\.0\.0"/VERSION="${project:version}"/g' ${project:root}/.sc/stacks/dist/bundle/sc.sh
      - echo "${project:version}" > ${project:root}/.sc/stacks/dist/bundle/version
      - cp ${project:root}/.sc/stacks/dist/site/* ${project:root}/.sc/stacks/dist/bundle/
  docker-login:
    runOn: host
    script:
      - |-
        bash -c '
          bash <(curl -Ls "https://dist.simple-container.com/sc.sh") secrets reveal
          sc stack secret-get -s dist dockerhub-cicd-token | docker login --username simplecontainer --password-stdin
        '
  build-cloud-helpers:
    runOn: host
    script:
      - go build -ldflags "${arg:ld-flags}" -o ${project:root}/dist/cloud-helpers ./cmd/cloud-helpers
  build-github-actions:
    runOn: host
    script:
      - echo "Building GitHub Actions binary..."
      - go build -ldflags "${arg:ld-flags}" -o ${project:root}/dist/github-actions ./cmd/github-actions
      - echo "‚úÖ GitHub Actions binary built successfully"
  test:
    runOn: host
    script:
      - if [ "${SKIP_TESTS}" != 'true' ]; then go test ./...; else echo "Skipping tests"; fi
  generate-schemas:
    runOn: host
    script:
      - echo "Generating JSON Schema files for Simple Container resources..."
      - go build -o ${project:root}/bin/schema-gen ./cmd/schema-gen
      - ${project:root}/bin/schema-gen ${project:root}/docs/schemas
      - echo "Successfully generated JSON Schema files in docs/schemas/"
  generate-embeddings:
    runOn: host
    script:
      - echo "üöÄ Generating OpenAI embeddings for AI Assistant..."
      - mkdir -p ${project:root}/pkg/assistant/embeddings/vectors
      - |
        # Build the embeddings generator tool
        echo "üî® Building embeddings generator..."
        cd ${project:root}
        mkdir -p bin
        go mod download
        go build -o ${project:root}/bin/generate-embeddings ${project:root}/cmd/generate-embeddings
        
        # Check if build succeeded
        if [ ! -f "${project:root}/bin/generate-embeddings" ]; then
          echo "‚ùå Failed to build embeddings generator binary"
          exit 1
        fi
        echo "‚úÖ Successfully built embeddings generator"
        
        # Get OpenAI API key from secrets or environment (build-time)  
        echo "üîë Retrieving OpenAI API key..."
        OPENAI_KEY=""
        
        # Try to get from Simple Container secrets - use pre-installed sc first, then local build
        if command -v sc >/dev/null 2>&1; then
          echo "üîç Using pre-installed sc command to retrieve OpenAI key..."
          OPENAI_KEY=$(sc stack secret-get -s dist openai-api-key 2>/dev/null || echo "")
        elif [ -f "${project:root}/bin/sc" ]; then
          echo "üîç Using locally built sc binary to retrieve OpenAI key..."
          OPENAI_KEY=$(${project:root}/bin/sc stack secret-get -s dist openai-api-key 2>/dev/null || echo "")
        fi
        
        # Fall back to environment variable
        if [ -z "$OPENAI_KEY" ]; then
          echo "üîç No OpenAI key found in secrets, checking environment variable..."
          OPENAI_KEY=$OPENAI_API_KEY
        fi
        
        # Set embedding model from environment variable or use default
        EMBEDDING_MODEL=${SIMPLE_CONTAINER_EMBEDDING_MODEL:-text-embedding-3-small}
        
        if [ -n "$OPENAI_KEY" ]; then
          echo "‚ú® Generating OpenAI embeddings using model: $EMBEDDING_MODEL"
          if ! ${project:root}/bin/generate-embeddings \
            -openai-key "$OPENAI_KEY" \
            -model "$EMBEDDING_MODEL" \
            -output ${project:root}/pkg/assistant/embeddings/vectors/prebuilt_embeddings_openai.json \
            -verbose; then
            echo "‚ùå Failed to generate OpenAI embeddings"
            exit 1
          fi
          
          echo "üè† Generating local embeddings as fallback..."
          if ! ${project:root}/bin/generate-embeddings \
            -local \
            -output ${project:root}/pkg/assistant/embeddings/vectors/prebuilt_embeddings_local.json \
            -verbose; then
            echo "‚ùå Failed to generate local embeddings"
            exit 1
          fi
          echo "‚úÖ Generated both OpenAI and local embeddings for optimal reliability"
        else
          echo "‚ö†Ô∏è  OpenAI API key not found in secrets or environment"
          echo "üè† Generating local embeddings only..."
          if ! ${project:root}/bin/generate-embeddings \
            -local \
            -output ${project:root}/pkg/assistant/embeddings/vectors/prebuilt_embeddings_local.json \
            -verbose; then
            echo "‚ùå Failed to generate local embeddings"
            exit 1
          fi
          echo "üí° To enable OpenAI embeddings: sc secrets add openai-api-key or export OPENAI_API_KEY=your-key"
          echo "üí° Set embedding model with: export SIMPLE_CONTAINER_EMBEDDING_MODEL=text-embedding-3-large"
        fi
        
        echo "‚úÖ Embeddings generation completed"
  build:
    runOn: host
    env:
      GOOS: ${arg:os:linux}
      GOARCH: ${arg:arch:amd64}
      CGO_ENABLED: "0"
    script:
      - echo "Building for ${GOOS}/${GOARCH}..."
      - if [ "${GOOS}" = "windows" ]; then export EXT=".exe"; else export EXT=""; fi
      - go build -ldflags "${arg:ld-flags}" -o ${project:root}/dist/${GOOS}-${GOARCH}/sc${EXT} ./cmd/sc
      - cd ${project:root}/dist/${GOOS}-${GOARCH} && tar -czf sc-${GOOS}-${GOARCH}.tar.gz sc${EXT}
      - mv ${project:root}/dist/${GOOS}-${GOARCH}/sc-${GOOS}-${GOARCH}.tar.gz ${project:root}/.sc/stacks/dist/bundle/sc-${GOOS}-${GOARCH}.tar.gz
      - cp ${project:root}/.sc/stacks/dist/bundle/sc-${GOOS}-${GOARCH}.tar.gz ${project:root}/.sc/stacks/dist/bundle/sc-${GOOS}-${GOARCH}-v${project:version}.tar.gz
  deploy:
    runOn: host
    script:
      - ${project:root}/bin/sc secrets reveal
      - ${project:root}/bin/sc deploy -s dist -e prod --skip-refresh
      - ${project:root}/bin/sc deploy -s docs -e prod --skip-refresh
  tag-release:
    runOn: host
    script:
      - git tag ${project:version} || echo "Already set tag ${project:version}"
      - git push -f origin ${project:version} || echo "Tag ${project:version} already exists in origin"
  build-docs:
    image: python:3.9.18
    workDir: ${project:root}/docs
    script:
      - pip install -r requirements.txt
      - PATH=${PATH}:~/.local/bin mkdocs build
  debug-aws-cloud-helpers:
    runOn: host
    env:
      AWS_LAMBDA_FUNCTION_TIMEOUT: 60
      SIMPLE_CONTAINER_STARTUP_DELAY: 10s
      SIMPLE_CONTAINER_CLOUD_HELPER_TYPE: sc-helper-aws-cloudwatch-alert-lambda
    script:
      - go build -gcflags="all=-N -l" -o ${project:root}/dist/cloud-helpers ./cmd/cloud-helpers
      - aws-lambda-rie ${project:root}/bin/dlv --listen=:2345 --headless=true --api-version=2 --accept-multiclient exec ${project:root}/dist/cloud-helpers
  rebuild:
    runOn: host
    script:
      - welder run generate-schemas
      - if [ "${SKIP_EMBEDDINGS}" != 'true' ]; then welder run generate-embeddings; else echo "Skipping embeddings"; fi
      - go build -ldflags "-s -w -X=${arg:package}/internal/build.Version=$(date '+0.0.0-pre%Y.%m.%d.%H.%M.%S')" -o ${project:root}/bin/sc ./cmd/sc && mkdir -p ~/.local/bin &&  cp -f ./bin/sc ~/.local/bin/sc
  build-github-actions-staging:
    runOn: host
    env:
      CGO_ENABLED: "0"
      GOOS: "linux"
      GOARCH: "amd64"
    script:
      - echo "Building static github-actions binary for staging (Alpine compatible)..."
      - mkdir -p ${project:root}/bin
      - build -ldflags "-s -w" -a -installsuffix cgo -o ${project:root}/bin/github-actions ./cmd/github-actions