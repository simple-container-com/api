// Code generated by mockery v2.42.2. DO NOT EDIT.

package git_mocks

import (
	fs "io/fs"

	billy "github.com/go-git/go-billy/v5"

	git "github.com/simple-container-com/api/pkg/api/git"

	mock "github.com/stretchr/testify/mock"
)

// GitRepoMock is an autogenerated mock type for the Repo type
type GitRepoMock struct {
	mock.Mock
}

// AddFileToGit provides a mock function with given fields: filePath
func (_m *GitRepoMock) AddFileToGit(filePath string) error {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for AddFileToGit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddFileToIgnore provides a mock function with given fields: filePath
func (_m *GitRepoMock) AddFileToIgnore(filePath string) error {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for AddFileToIgnore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: msg, opts
func (_m *GitRepoMock) Commit(msg string, opts git.CommitOpts) error {
	ret := _m.Called(msg, opts)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, git.CommitOpts) error); ok {
		r0 = rf(msg, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyFile provides a mock function with given fields: fromPath, toPath
func (_m *GitRepoMock) CopyFile(fromPath string, toPath string) error {
	ret := _m.Called(fromPath, toPath)

	if len(ret) == 0 {
		panic("no return value specified for CopyFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(fromPath, toPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDir provides a mock function with given fields: filePath
func (_m *GitRepoMock) CreateDir(filePath string) (billy.Dir, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for CreateDir")
	}

	var r0 billy.Dir
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (billy.Dir, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) billy.Dir); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billy.Dir)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFile provides a mock function with given fields: filePath
func (_m *GitRepoMock) CreateFile(filePath string) (billy.File, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 billy.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (billy.File, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) billy.File); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billy.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: filePath
func (_m *GitRepoMock) Exists(filePath string) bool {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Gitdir provides a mock function with given fields:
func (_m *GitRepoMock) Gitdir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Gitdir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Init provides a mock function with given fields: wd, opts
func (_m *GitRepoMock) Init(wd string, opts ...git.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, wd)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...git.Option) error); ok {
		r0 = rf(wd, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitOrOpen provides a mock function with given fields: wd, opts
func (_m *GitRepoMock) InitOrOpen(wd string, opts ...git.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, wd)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitOrOpen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...git.Option) error); ok {
		r0 = rf(wd, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Log provides a mock function with given fields:
func (_m *GitRepoMock) Log() []git.Commit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 []git.Commit
	if rf, ok := ret.Get(0).(func() []git.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]git.Commit)
		}
	}

	return r0
}

// Open provides a mock function with given fields: wd, opts
func (_m *GitRepoMock) Open(wd string, opts ...git.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, wd)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...git.Option) error); ok {
		r0 = rf(wd, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenFile provides a mock function with given fields: filePath, flag, perm
func (_m *GitRepoMock) OpenFile(filePath string, flag int, perm fs.FileMode) (billy.File, error) {
	ret := _m.Called(filePath, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 billy.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) (billy.File, error)); ok {
		return rf(filePath, flag, perm)
	}
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) billy.File); ok {
		r0 = rf(filePath, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billy.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, fs.FileMode) error); ok {
		r1 = rf(filePath, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFileFromIgnore provides a mock function with given fields: filePath
func (_m *GitRepoMock) RemoveFileFromIgnore(filePath string) error {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFileFromIgnore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Workdir provides a mock function with given fields:
func (_m *GitRepoMock) Workdir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Workdir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewGitRepoMock creates a new instance of GitRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitRepoMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitRepoMock {
	mock := &GitRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
